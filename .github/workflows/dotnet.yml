name: Unix .NET

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      architecture:
        required: true
        type: string
      target_framework:
        required: true
        type: string
      build_configuration:
        required: true
        type: string

jobs:
  unix-net:
    name: .NET ${{ inputs.image }}-${{ inputs.architecture }} ${{ inputs.target_framework }} ${{ inputs.build_configuration }}
    runs-on: ${{inputs.image}}
    env:
      run_settings_args: 'NUnit.DefaultTestNamePattern="{C}:{m}{a}" RunConfiguration.TargetPlatform=${{inputs.architecture}}'
    steps:
      - uses: actions/checkout@v4

      - run: |
          $channel = '${{inputs.target_framework}}'.Replace('coreapp', '').Replace('net', '');
          "channel=$channel" | Out-File -FilePath $env:GITHUB_ENV -Append;
        shell: pwsh
      - run: |
          if ('${{inputs.architecture == 'x86'}}' -eq 'true') {
            $progfiles = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ProgramFilesX86);
            "progfiles=$progfiles" | Out-File -FilePath $env:GITHUB_ENV -Append;
          }
          if ('${{inputs.architecture == 'x64'}}' -eq 'true') {
            $progfiles = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ProgramFiles);
            "progfiles=$progfiles" | Out-File -FilePath $env:GITHUB_ENV -Append;
          }
        shell: pwsh

      - name: Setup .NET Latest ${{inputs.architecture}}
        run: |
          Invoke-WebRequest 'https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1' -OutFile dotnet-install.ps1;
          .\dotnet-install.ps1 -Channel Current -Architecture ${{inputs.architecture}} -Runtime dotnet -InstallDir "${{env.progfiles}}/dotnet}}" -NoPath
        shell: pwsh

      - name: Setup .NET ${{env.channel}} ${{inputs.architecture}}
        run: |
          Invoke-WebRequest 'https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1' -OutFile dotnet-install.ps1;
          .\dotnet-install.ps1 -Channel ${{env.channel}} -Architecture ${{inputs.architecture}} -Runtime dotnet -InstallDir "${{env.progfiles}}/dotnet}}" -NoPath
        shell: pwsh

      - name: Build
        run: |
          dotnet build -c ${{inputs.build_configuration}} -f ${{inputs.target_framework}} Harmony.sln

      - name: Test .NET
        run: |
          dotnet test Harmony.sln --no-build -c ${{inputs.build_configuration}} -f ${{inputs.target_framework}} --logger trx --results-directory ./TestResults --blame -- ${{env.run_settings_args}}

      - name: Parse Trx files
        uses: NasAmin/trx-parser@v0.5.0
        with:
          TRX_PATH: ${{ github.workspace }}/TestResults #This should be the path to your TRX files
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}   
