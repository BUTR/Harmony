on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  # Disable the .NET logo in the console output.
  DOTNET_NOLOGO: true
  # Disable the .NET first time experience to skip caching NuGet packages and speed up the build.
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending .NET CLI telemetry to Microsoft.
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  windows-net:
    strategy:
      matrix:
        architecture: ['x86', 'x64']
        target_framework: ['netcoreapp3.0', 'netcoreapp3.1', 'net5.0', 'net6.0', 'net7.0', 'net8.0']
        build_configuration: ['ReleaseFat', 'ReleaseThin']
    uses: ./.github/workflows/windows-dotnet.yml
    with:
      architecture: ${{ matrix.architecture }}
      target_framework: ${{ matrix.target_framework }}
      build_configuration: ${{ matrix.build_configuration }}

  windows-framework:
    strategy:
      matrix:
        architecture: ['x86', 'x64']
        target_framework: ['net35', 'net452', 'net472', 'net48']
        build_configuration: ['ReleaseFat', 'ReleaseThin']
    uses: ./.github/workflows/windows-framework.yml
    with:
      architecture: ${{ matrix.architecture }}
      target_framework: ${{ matrix.target_framework }}
      build_configuration: ${{ matrix.build_configuration }}

  windows-mono:
    strategy:
      matrix:
        architecture: ['x86', 'x64']
        target_framework: ['net35', 'net452', 'net472', 'net48']
        build_configuration: ['ReleaseFat', 'ReleaseThin']
    uses: ./.github/workflows/windows-mono.yml
    with:
      architecture: ${{ matrix.architecture }}
      target_framework: ${{ matrix.target_framework }}
      build_configuration: ${{ matrix.build_configuration }}

  ubuntu-net:
    strategy:
      matrix:
        architecture: ['x64']
        target_framework: ['netcoreapp3.0', 'netcoreapp3.1', 'net5.0', 'net6.0', 'net7.0', 'net8.0']
        build_configuration: ['ReleaseFat', 'ReleaseThin']
    uses: ./.github/workflows/ubuntu-dotnet.yml
    with:
      architecture: ${{ matrix.architecture }}
      target_framework: ${{ matrix.target_framework }}
      build_configuration: ${{ matrix.build_configuration }}

  ubuntu-mono:
    strategy:
      matrix:
        architecture: ['x64']
        target_framework: ['net35', 'net452', 'net472', 'net48']
        build_configuration: ['ReleaseFat', 'ReleaseThin']
    uses: ./.github/workflows/ubuntu-mono.yml
    with:
      architecture: ${{ matrix.architecture }}
      target_framework: ${{ matrix.target_framework }}
      build_configuration: ${{ matrix.build_configuration }}

  build:
    name: ${{ matrix.agent.os }} ${{ matrix.agent.architecture }} ${{ matrix.runtimeType.framework.name }}${{ matrix.runtimeType.dotnet.name }} ${{ matrix.buildConfiguration }}
    runs-on: ${{ matrix.agent.image }}
    continue-on-error: true
    strategy:
      matrix:
        agent: [
          #{ os: 'windows', architecture: 'x86', image: 'windows-latest' },
          #{ os: 'windows', architecture: 'x64', image: 'windows-latest' },
          #{ os: 'ubuntu', architecture: 'x64', image: 'ubuntu-latest' },
          { os: 'macos', architecture: 'x64', image: 'macos-13' },
          { os: 'macos', architecture: 'arm64', image: 'macos-14' },
        ]
        buildConfiguration: ['ReleaseFat', 'ReleaseThin']
    env:
      # Note: Azure Pipelines currently has an issue where if the test name is in the fully qualified name format "namespace.classname.methodname(args)",
      # it only shows "methodname" rather than the fully qualified name (something do with more than 2 periods in the test name).
      # Workaround is to use the format: "namespace.classname:methodname(args)" (note the colon)
      # Also, Azure Pipelines command line argument parser tends to treat single quotes within argument strings literally, so using double quotes instead.
      runSettingsArgs: "NUnit.DefaultTestNamePattern=\"{C}:{m}{a}\" RunConfiguration.TargetPlatform=${{matrix.agent.architecture}}"
      # Blame mode helps isolate tests that cause crashes (https://github.com/Microsoft/vstest-docs/blob/master/docs/extensions/blame-datacollector.md),
      # although it somewhat ironically also makes such unstable tests crash less often, and makes the test suite run slightly slower.
      blameArg: --blame
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET Windows x86
        if: matrix.agent.os == 'windows' && matrix.agent.architecture == 'x86'
        run: |
          Invoke-WebRequest 'https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1' -OutFile dotnet-install.ps1;
          .\dotnet-install.ps1 -Channel 3.0 -Architecture x86 -Runtime dotnet -InstallDir "${Env:ProgramFiles(x86)}\dotnet" -NoPath
          .\dotnet-install.ps1 -Channel 3.1 -Architecture x86 -Runtime dotnet -InstallDir "${Env:ProgramFiles(x86)}\dotnet" -NoPath
          .\dotnet-install.ps1 -Channel 5.0 -Architecture x86 -Runtime dotnet -InstallDir "${Env:ProgramFiles(x86)}\dotnet" -NoPath
          .\dotnet-install.ps1 -Channel 6.0 -Architecture x86 -Runtime dotnet -InstallDir "${Env:ProgramFiles(x86)}\dotnet" -NoPath
          .\dotnet-install.ps1 -Channel 7.0 -Architecture x86 -Runtime dotnet -InstallDir "${Env:ProgramFiles(x86)}\dotnet" -NoPath
          .\dotnet-install.ps1 -Channel 8.0 -Architecture x86 -Runtime dotnet -InstallDir "${Env:ProgramFiles(x86)}\dotnet" -NoPath
        shell: bash

      - name: Setup .NET Ubuntu/Windows/OSX x64
        if: matrix.agent.architecture == 'x64'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            3.0.x
            3.1.x
            5.0.x
            6.0.x
            7.0.x
            8.0.x

      - name: Setup .NET Ubuntu arm64
        if: matrix.agent.os == 'ubuntu' && matrix.agent.architecture == 'arm64'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            3.0.x
            3.1.x
            5.0.x
            6.0.x
            7.0.x
            8.0.x

      - name: Setup .NET Windows arm64
        if: matrix.agent.os == 'windows' && matrix.agent.architecture == 'arm64'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            5.0.x
            6.0.x
            7.0.x
            8.0.x

      - name: Setup .NET OSX arm64
        if: matrix.agent.os == 'macos' && matrix.agent.architecture == 'arm64'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: |
            6.0.x
            7.0.x
            8.0.x


      - name: Setup Mono Windows x86
        if: matrix.agent.os == 'windows' && matrix.agent.architecture == 'x86'
        run: |
          curl -L https://download.mono-project.com/archive/6.12.0/windows-installer/mono-6.12.0-gtksharp-2.12.45-win32-0.msi -o mono.msi
          msiexec /i mono.msi /quiet
          
      - name: Setup Mono Windows x64
        if: matrix.agent.os =='windows' && matrix.agent.architecture == 'x64'
        run: |
          curl -L https://download.mono-project.com/archive/6.12.0/windows-installer/mono-6.12.0.199-x64-0.msi -o mono.msi
          msiexec /i mono.msi /quiet



      - name: Build
        run: |
          dotnet build -c ${{matrix.buildConfiguration}} Harmony.sln

      - name: Test .NET and Mono Ubuntu/OSX
        run: |
          dotnet test Harmony.sln --no-build --configuration ${{matrix.buildConfiguration}} --logger "console;verbosity=normal" --blame -- ${{env.runSettingsArgs}}

      - name: Test Mono Windows
        if: matrix.agent.os == 'windows'
        run: |
          shopt -s failglob globstar
          set -x
          
          if ${{matrix.agent.architecture == 'x86'}}; then
            mono="$(printenv "ProgramFiles(x86)")/Mono/bin/mono.exe"
          fi
          if ${{matrix.agent.architecture == 'x64'}}; then
            mono="$(echo $PROGRAMFILES)/Mono/bin/mono.exe"
          fi
          
          # Execute the tests via mono + vstest.console.
          vstest="$(vswhere.exe -latest -property installationPath)/Common7/IDE/CommonExtensions/Microsoft/TestWindow/vstest.console.exe"
          "$mono" "$vstest" "HarmonyTests/bin/Release/net35/HarmonyTests.dll" --Framework:net35 --logger:trx --ResultsDirectory:"$RUNNER_TEMP" --blame -- ${{env.runSettingsArgs}}
          "$mono" "$vstest" "HarmonyTests/bin/Release/net452/HarmonyTests.dll" --Framework:net452 --logger:trx --ResultsDirectory:"$RUNNER_TEMP" --blame -- ${{env.runSettingsArgs}}
          "$mono" "$vstest" "HarmonyTests/bin/Release/net472/HarmonyTests.dll" --Framework:net472 --logger:trx --ResultsDirectory:"$RUNNER_TEMP" --blame -- ${{env.runSettingsArgs}}
          "$mono" "$vstest" "HarmonyTests/bin/Release/net48/HarmonyTests.dll" --Framework:net48 --logger:trx --ResultsDirectory:"$RUNNER_TEMP" --blame -- ${{env.runSettingsArgs}}
        shell: bash
