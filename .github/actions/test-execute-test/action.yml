name: Test Execute Test
description: Executes the tests

inputs:
  os:
    description: 'The operating system to use'
    required: true
  architecture:
    description: 'The architecture to use'
    required: true
  runtime-type:
    description: 'Values: "dotnet", "mono", "fx"'
    required: true
  target_framework:
    description: 'The target framework to use'
    required: true
  target_framework_array:
    description: 'The target frameworks to use'
    required: true
  build_configuration:
    description: 'The build configuration to use'
    required: true
  upload_tests:
    description: 'Whether to upload the test results'
    required: true
  experimental:
    description: 'Whether the tests are mandatory for the build to pass'
    required: true

runs:
  using: "composite"
  steps:
    - name: Set Test Args
      id: test-args
      run: |
        $run_settings_args = "NUnit.DefaultTestNamePattern='{C}:{m}{a}' RunConfiguration.TargetPlatform=${{inputs.architecture}}";
        "run_settings_args=$run_settings_args" | Out-File -FilePath $env:GITHUB_OUTPUT -Append;
        
        $vstest = "'HarmonyTests/bin/Release/${{inputs.target_framework}}/HarmonyTests.dll' --framework:${{inputs.target_framework}} --logger:trx --logger:'console;verbosity=normal' --blame";
        "vstest=$vstest" | Out-File -FilePath $env:GITHUB_OUTPUT -Append;
        
        $dotnet = "'HarmonyTests/bin/Release/${{inputs.target_framework}}/HarmonyTests.dll' -f ${{inputs.target_framework}} -l trx -l 'console;verbosity=normal' --blame";
        "dotnet=$dotnet" | Out-File -FilePath $env:GITHUB_OUTPUT -Append;
      shell: pwsh

    - name: Get Program Files path for ${{inputs.architecture}}
      uses: ./.github/actions/get-program-files
      id: get-program-files
      with:
        architecture: ${{inputs.architecture}}

    - name: Perform Tests Windows Mono
      if: ${{inputs.os == 'windows' && inputs.runtime-type == 'mono'}}
      run: |
        $vspath = vswhere -latest -property installationPath;
        $vstest = join-path $vspath "Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe";
        
        $mono = "${{steps.get-program-files.outputs.path}}/Mono/bin/mono.exe";
        & "$mono" "$vstest" ${{steps.test-args.outputs.vstest}} -- ${{steps.test-args.outputs.run_settings_args}};
      shell: pwsh
      
    - name: Perform Tests Windows FX
      if: ${{inputs.os == 'windows' && inputs.runtime-type == 'fx'}}
      run: |
        $vspath = vswhere -latest -property installationPath;
        $vstest = join-path $vspath "Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe";
        
        & "$vstest" ${{steps.test-args.outputs.vstest}} -- ${{steps.test-args.outputs.run_settings_args}};
      shell: pwsh
      
    - name: Perform Tests Windows .NET
      if: ${{inputs.os == 'windows' && inputs.runtime-type == 'dotnet'}}
      run: |
        dotnet test ${{steps.test-args.outputs.dotnet}} -- ${{steps.test-args.outputs.run_settings_args}};
      shell: pwsh
      
    - name: Perform Tests Ubuntu/MacOS/MacOS-arm64 .NET/Mono
      if: ${{inputs.os == 'ubuntu' || inputs.os == 'macos' || inputs.os == 'macos-arm64'}}
      run: |
        $target_framework = "${{inputs.target_framework}}";
        if ($target_framework -ne '') {
          dotnet test ${{steps.test-args.outputs.dotnet}} -- ${{steps.test-args.outputs.run_settings_args}};
        }
        
        $target_frameworks = "${{inputs.target_framework_array}}";
        if ($target_frameworks -ne '') {
          foreach ($target_framework in ConvertFrom-Json $target_frameworks) {
            dotnet test `"HarmonyTests/bin/Release/$target_framework/HarmonyTests.dll`" -f $target_framework -l trx -l 'console;verbosity=normal' --blame -- ${{steps.test-args.outputs.run_settings_args}};
          }
        }
      shell: pwsh

    - name: Upload Test Result
      uses: ./.github/actions/test-upload-result
      if: ${{(inputs.upload_tests == 'true') && (always() || failure())}}
      with:
        os: ${{inputs.os}}
        architecture: ${{inputs.architecture}}
        runtime-type: ${{inputs.runtime-type}}
        target_framework: ${{inputs.target_framework}}
        build_configuration: ${{inputs.build_configuration}}
        experimental: ${{inputs.experimental == 'true'}}
