name: Template Testing Windows Mono

on:
  workflow_call:
    inputs:
      architecture:
        required: true
        type: string
      target_framework:
        required: true
        type: string
      build_configuration:
        required: true
        type: string

jobs:
  windows-mono:
    name: Mono ${{ inputs.architecture }} ${{ inputs.target_framework }} ${{ inputs.build_configuration }}
    runs-on: windows-latest
    env:
      run_settings_args: 'NUnit.DefaultTestNamePattern="{C}:{m}{a}" RunConfiguration.TargetPlatform=${{inputs.architecture}}'
    steps:
      - uses: actions/checkout@v4

      - name: Set ProgramFiles env
        run: |
          if ('${{ inputs.architecture == 'x86'}}' -eq 'true') {
            $programfiles = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ProgramFilesX86);
            "programfiles=$programfiles" | Out-File -FilePath $env:GITHUB_ENV -Append;
          }
          if ('${{ inputs.architecture == 'x64'}}' -eq 'true') {
            $programfiles = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ProgramFiles);
            "programfiles=$programfiles" | Out-File -FilePath $env:GITHUB_ENV -Append;
          }
        shell: pwsh

      - name: Setup .NET Sdk
        uses: actions/setup-dotnet@v3
    
      - name: Setup Mono x86
        if: inputs.architecture == 'x86'
        run: |
          curl -L https://download.mono-project.com/archive/6.12.0/windows-installer/mono-6.12.0-gtksharp-2.12.45-win32-0.msi -o mono.msi;
          msiexec /i mono.msi /quiet;

      - name: Setup Mono x64
        if: inputs.architecture == 'x64'
        run: |
          curl -L https://download.mono-project.com/archive/6.12.0/windows-installer/mono-6.12.0.199-x64-0.msi -o mono.msi;
          msiexec /i mono.msi /quiet;

      #- name: Build
      #  run: |
      #    dotnet build -c ${{inputs.build_configuration}} -f ${{inputs.target_framework}} Harmony.sln

      - name: Download Build Output
        uses: actions/download-artifact@v4
        with:
          name: build-output-windows-${{inputs.build_configuration}}
          path: ./

      - name: Test Mono
        run: |
          shopt -s failglob globstar
          set -x
          
          # Execute the tests via mono + vstest.console.
          mono="${{env.programfiles}}/Mono/bin/mono.exe"
          vstest="$(vswhere.exe -latest -property installationPath)/Common7/IDE/CommonExtensions/Microsoft/TestWindow/vstest.console.exe"
          "$mono" "$vstest" "HarmonyTests/bin/Release/${{inputs.target_framework}}/HarmonyTests.dll" --Framework:${{inputs.target_framework}} --logger:trx --ResultsDirectory:"${{ github.workspace }}/TestResults" --blame -- ${{env.run_settings_args}}
        shell: bash

      - name: Parse Trx files
        uses: NasAmin/trx-parser@v0.5.0
        with:
          TRX_PATH: ${{ github.workspace }}/TestResults #This should be the path to your TRX files
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}   
