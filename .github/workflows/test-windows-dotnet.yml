name: Template Testing Windows .NET

on:
  workflow_call:
    inputs:
      architecture:
        required: true
        type: string
      target_framework:
        required: true
        type: string
      build_configuration:
        required: true
        type: string
      run_settings_args:
        required: true
        type: string

jobs:
  unix-net:
    name: .NET ${{ inputs.architecture }} ${{ inputs.target_framework }} ${{ inputs.build_configuration }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Channel env
        run: |
          $channel = '${{inputs.target_framework}}'.Replace('coreapp', '').Replace('net', '');
          "channel=$channel" | Out-File -FilePath $env:GITHUB_ENV -Append;
        
      - name: Set ProgramFiles env
        run: |
          if ('${{ inputs.architecture == 'x86'}}' -eq 'true') {
            $programfiles = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ProgramFilesX86);
            "programfiles=$programfiles" | Out-File -FilePath $env:GITHUB_ENV -Append;
          }
          if ('${{ inputs.architecture == 'x64'}}' -eq 'true') {
            $programfiles = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ProgramFiles);
            "programfiles=$programfiles" | Out-File -FilePath $env:GITHUB_ENV -Append;
          }

      - name: Setup .NET Latest STS/LTS ${{inputs.architecture}}
        run: |
          Invoke-WebRequest 'https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1' -OutFile dotnet-install.ps1;
          .\dotnet-install.ps1 -Channel LTS -Architecture ${{inputs.architecture}} -Runtime dotnet -InstallDir "${{env.programfiles}}/dotnet" -NoPath;
          .\dotnet-install.ps1 -Channel STS -Architecture ${{inputs.architecture}} -Runtime dotnet -InstallDir "${{env.programfiles}}/dotnet" -NoPath;

      - name: Setup .NET ${{env.channel}} ${{inputs.architecture}}
        run: |
          Invoke-WebRequest 'https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1' -OutFile dotnet-install.ps1;
          .\dotnet-install.ps1 -Channel ${{env.channel}} -Architecture ${{inputs.architecture}} -Runtime dotnet -InstallDir "${{env.programfiles}}/dotnet" -NoPath;

      #- name: Build
      #  run: |
      #    dotnet build -c ${{inputs.build_configuration}} -f ${{inputs.target_framework}} Harmony.sln

      - name: Download Build Output
        uses: actions/download-artifact@v4
        with:
          name: build-output-windows-${{inputs.build_configuration}}
          path: ./

      - name: Test .NET
        run: |
          dotnet test Harmony.sln --no-build -c ${{inputs.build_configuration}} -f ${{inputs.target_framework}} --logger trx --blame -- ${{inputs.run_settings_args}}

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-results-${{inputs.os}}-${{inputs.architecture}}-${{inputs.target_framework}}-${{inputs.build_configuration}}
          path: '**/*.trx'
